const fs = require('fs')
const { resolve, dirname } = require('path')
const { promisify } = require('util')
const mkdirP = require('mkdirp')
const findup = promisify(require('findup'))
const access = promisify(fs.access)

module.exports.determineRoot = async (filename, dir = './') =>
  await findup(dir, filename)

const exists = async path => {
  let result = false
  if (!path) return result
  try {
    result = !await access(path)
  } catch (err) {}
  return result
}

module.exports.resolveApp = (name, path = '') =>
  path && name ? resolve(path, name) : null

const mkdirp = (path, opts) =>
  new Promise((resolve, reject) =>
    mkdirP(
      path,
      opts,
      (err, made) => (err === null ? resolve(made) : reject(err))
    )
  )

// touch
// force => the file to be empty
module.exports.touch = async (filepath, force) => {
  await mkdirp(dirname(filepath))
  const exist = await exists(filepath)
  !(exist && !force) && fs.writeFileSync(filepath, '')
  // fs.closeSync(fs.openSync(filepath, 'w'))
}
module.exports.mkdirp = mkdirp
module.exports.exists = exists
