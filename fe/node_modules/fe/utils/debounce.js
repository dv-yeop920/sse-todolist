const { wait } = require('./')
/**
 * 
 * @param {*} fun 
 * @param {*} time 
 */
function Debounce(fun, time) {
  let timer = null;
  if (Object.prototype.toString.call(fun) === '[object Function]') {
    return function deb() {
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
      const arg = arguments
      timer = setTimeout(() => {
        return fun(...arg)
      })
    }
  } else if(Object.prototype.toString.call(fun) === '[object AsyncFunction]') {
    let cnt = 0
    return async function deb() {
      cnt++
      await wait(time)
      cnt--
      if (cnt) {
        return;
      }
      return await fun(...arguments)
    }
  }
}
module.exports = Debounce