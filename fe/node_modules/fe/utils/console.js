const chalk = require('chalk')
const ora = require('ora')

const colors = {
  warning: 'yellow',
  error: 'red',
  info: 'gray',
  success: 'green'
}
let isCleared = true

module.exports.clearConsole = () => {
  process.stdout.write(isCleared ? '\x1bc' : '\x1b[2J\x1b[0f')
  isCleared = false
}

module.exports.inline = new Proxy(
  {},
  {
    get: (x, key) => (...args) =>
      console.log.apply(null, [`${chalk[colors[key]]('●')}`, ...args])
  }
)

module.exports.Spinner = class Spinner {
  constructor() {
    this.defaultConfig = {
      text: 'waiting'
    }
    this.configs = {
      wait: {
        text: 'Init building may take more time, please be patient',
        color: 'white',
        spinner: 'clock'
      },
      running: {
        text: 'Re-building',
        color: 'yellow',
        spinner: 'runner'
      },
      done: {
        text: 'http://127.0.0.1:3000',
        color: 'green',
        spinner: 'earth'
      },
      error: {
        text: 'Got a error: TODO',
        color: 'red',
        spinner: {
          interval: 0,
          frames: ['✖ ']
        }
      }
    }
  }

  stop() {
    this.spinner && this.spinner.stop()
  }

  /*
  spinner.start('done')
  spinner.start('done', {text: 'done'})
  spinner.start({text: 'done'})
   */
  start(type = this.defaultConfig, option = {}) {
    let opt = {}
    opt =
      type + '' === type
        ? Object.assign({}, this.configs[type] || {}, option)
        : type
    this.stop()
    this.spinner = ora(opt).start()
  }
}
