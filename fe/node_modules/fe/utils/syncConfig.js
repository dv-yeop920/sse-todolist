const fs = require('fs')
const path = require('path')
const osenv = require('osenv')

const cache = {}
const writers = {}

const Writer = function(file) {
  this.file = file
  this.callbacks = []
  this.nextData = null
  this.nextCallbacks = []
  this.lock = false
}

Writer.prototype.write = function(data, cb = () => {}) {
  if (this.lock) {
    this.nextCallbacks.push(cb)
    this.nextData = data
    return
  }
  this.lock = true
  const tmpFile = path.join(osenv.tmpdir(), '.~' + path.basename(this.file))
  fs.writeFile(
    tmpFile,
    data,
    function(err) {
      if (err) {
        while (this.callbacks.length) this.callbacks.shift()(err)
        cb(err)
        return
      }

      let src = fs.createReadStream(tmpFile)
      let dest = fs
        .createWriteStream(this.file)
        .once(
          'close',
          function(err) {
            fs.unlinkSync(tmpFile)
            while (this.callbacks.length) this.callbacks.shift()(err)
            cb()
            this.lock = false
            if (this.nextData) {
              var data = this.nextData
              this.callbacks = this.nextCallbacks
              this.nextData = null
              this.nextCallbacks = []
              this.write(data, this.callbacks.pop())
            }
          }.bind(this)
        )
        .on('error', err => {
          console.log(err)
          src.destroy()
          dest.destroy()
          cb(err)
        })
      src.pipe(dest)
    }.bind(this)
  )
}

const coWrite = (file, data, cb) => {
  file = path.resolve(file)
  writers[file] = writers[file] || new Writer(file)
  writers[file].write(data, cb)
}

module.exports = (filename, onChange) => {
  if (cache[filename]) {
    return cache[filename]
  }
  !fs.existsSync(filename) && fs.writeFileSync(filename, '{}')
  // Fix empty file
  let content = (fs.readFileSync(filename) + '').trim() || '{}'
  let config = JSON.parse(content, { encoding: 'utf-8' })
  let configProxy = new Proxy(config, {
    get: (target, key, recive) => Reflect.get(target, key, recive),
    set: (target, key, value) => {
      const prevTarget = Object.assign({}, target)
      Reflect.set(target, key, value)
      // target[key] = value
      onChange && onChange(prevTarget, target)
      coWrite(filename, JSON.stringify(target, null, 2))
      return target
    }
  })
  cache[filename] = configProxy
  return configProxy
}
