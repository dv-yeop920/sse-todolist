const { join } = require('path')
const chalk = require('chalk')
const debug = require('debug')('fe:build')
const { Nuxt, Builder, Generator, Utils } = require('nuxt')
const { inline } = require('../../../utils/console')

module.exports = async (runtime, opts = {}) => {
  const sharedConfigPath = runtime.ENV.sharedConfigPath
  const config = require('../../../utils/mergeConfigFile')(
    'plugins/nuxt.config.js',
    'nuxt.config.js',
    runtime
  )

  // Force production build
  config.dev = false
  Object.assign(config.build, opts)

  const nuxt = new Nuxt(config)
  const builder = new Builder(nuxt)

  // Setup hooks
  nuxt.hook('error', (err, from) => {
    inline.error('Build failed!')
    console.log(err, from)
  })

  if (config.build.ssr) {
    await builder.build().catch(err => {
      inline.error('[SSR] build failed!')
      console.log(err)
    })
    inline.success(
      `${chalk.blue('[SSR]')} build success! ${chalk.green(
        `[${config.buildDir}/dist]`
      )}`
    )
  } else {
    const now = Date.now()
    nuxt.hook('generate:distRemoved', () => debug('Destination folder cleaned'))
    nuxt.hook('generate:distCopied', () => debug('Static & build files copied'))
    nuxt.hook('generate:page', page => debug('Generate file: ' + page.path))
    nuxt.hook('generate:done', (generator, errors) => {
      debug(
        `HTML Files generated in ${Math.round((Date.now() - now) / 100) / 10}s`
      )
      errors.length && console.log('\n' + errors.toString())
    })

    // Disable minify to get exact results of nuxt start
    config.generate.minify = false

    // Generate dist for SPA static deployment
    await new Generator(nuxt, builder).generate({ build: true }).catch(err => {
      inline.error('[SPA] build failed!')
      console.log(err)
    })
    inline.success(
      `${chalk.blue('[SPA]')} build success! ${chalk.green(
        `[${config.buildDir}/dist]`
      )}`
    )
  }
}
