const debugHot = require('debug')('hot')
const { join } = require('path')
const stoppable = require('../../utils/stoppableServer')
const { inline, clearConsole } = require('../../utils/console')

const guide = require('./guide')
const watcher = require('./watcher')

module.exports = async (args, options, logger, injectOpts) => {
  clearConsole()

  // Reset NODE_ENV as development
  process.env.NODE_ENV = 'development'

  const runtime = await guide()
  const { CLIENT_MODE } = runtime.project.config
  const entry = join(runtime.ENV.cliRoot, 'modules/server/index.js')
  let { start } = require(entry)
  const renderPlugin =
    CLIENT_MODE && (await require(`./plugins/${CLIENT_MODE}`)(runtime))
  let isStarting = true
  let server = await start({ ...args, ...options }, renderPlugin).catch(err =>
    inline.error(err)
  )
  stoppable(server.server)

  // TODO: ensure everything is ready
  // await wait(500)
  isStarting = false
  watcher(runtime, async (event, path) => {
    debugHot && inline.info(`[${event}]`, path)
    // console.log(isStarting, event, path)
    if (isStarting || !server) return
    isStarting = true
    server.close()
    server.server.stop()
    clearConsole()
    setImmediate(async () => {
      server = await start({ ...args, ...options }, renderPlugin).catch(err =>
        inline.error(err)
      )
      stoppable(server.server)
      isStarting = false
    })
  })
}
