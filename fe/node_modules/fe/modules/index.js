const chalk = require('chalk')

const invoke = command => (...args) =>
    require(`./${command}/`).apply(this, args)

module.exports = cmd => {
    cmd
        .command(
            'dev',
            `Enter development mode with ${chalk.blue.underline('HMR')}`
        )
        .alias('d')
        // .argument('[options...]', 'Other environments')
        .option('-o, --open', 'Open browser', cmd.BOOL)
        .option('-p, --port', 'Port to listen')
        .option('-i, --ip', 'IP to listen')
        .action(invoke('dev'))
        .help('hi dev')

        .command('build', 'Build for production')
        .alias('b')
        .option('-a, --analyze', 'Run analyzer after build')
        .option('-p, --profile', 'Display profile data')
        .option('-d, --display-modules', 'Display modules')
        .option(
            '-s, --ssr',
            `Force enable ${chalk.blue.underline(
                'SSR'
            )} | ${chalk.blue.underline('SPA')} mode`,
            cmd.BOOL
        )
        // .argument('[options...]', 'Other environments')
        .action(invoke('build'))
        .help('Build and ready for production')

        .command('start', 'Start production mode')
        .alias('s')
        .option('-p, --port', 'Port to listen')
        .option('-i, --ip', 'IP to listen')
        .action(invoke('start'))
        .help('hi start')

        .command('init', 'Initialize a new project')
        .alias('i')
        .argument('<project>', 'project name')
        .argument('[boilerplate]', 'boilerplate name')
        .option('-c, --clone', 'use git clone')
        .option('--offline', 'use cached template')
        .action(invoke('init'))
        .help('hi init')

        .command('add', 'TODO')
        .alias('a')
        // .argument('[options...]', 'Other environments')
        .action(invoke('add'))
        .help('hi add')

        .command('env', 'Display runtime ENV info')
        .alias('e')
        .option('-n, --network', 'Detect network connection')
        // .argument('[options...]', 'Other environments')
        .action(invoke('env'))
        .help('hi env')

        .command('deploy', 'TODO')
        .alias('i')
        // .argument('[options...]', 'Other environments')
        .action(() => {})

        .command('generate', 'TODO')
        .alias('g')
        // .argument('[options...]', 'Other environments')
        .action(invoke('generate'))

        .command('fd', 'Consul service discovery')
        .alias('f')
        .argument('<psm>', 'service name')
        // .argument('[options...]', 'Other environments')
        .action(invoke('fd'))
        .help('hi fd')

        .command('list', `List resource in ${chalk.blue.underline('fe')} stack`)
        .alias('l')
        // .argument('[options...]', 'Other environments')
        .action(invoke('list'))

        .command('test', 'TODO')
        .alias('t')
        .argument('[file|directory|glob]', 'test files')
        .option(
            '-w, --watch',
            'Re-run tests when tests and source files change'
        )
        .option(
            '-m, --match',
            'Only run tests with matching title (Can be repeated)'
        )
        .option('-u, --update-snapshots', 'Update snapshots')
        .option('--fail-fast', 'Stop after first test failure')
        .option('-s, --serial', 'Run tests serially')
        .option(
            '-c, --concurrency',
            'Max number of test files running at the same time (Default: CPU cores)'
        )
        .option('-v, --verbose', 'Enable verbose output')
        .option('-t, --tap', 'Generate TAP output')
        .option('--no-cache', 'Disable the compiler cache')
        .option('--color', 'Force color output')
        .option('--no-color', 'Disable color output')
        .action(invoke('test'))
        .help(
            `${chalk.gray(
                'Default patterns when no arguments:'
            )}\ntest.js test-*.js test/**/*.js **/__tests__/**/*.js **/*.test.js`
        )

        .command('update', 'Update outdated local dependencies')
        .alias('u')
        // .argument('[options...]', 'Other environments')
        .action(invoke('update'))

        .command('upgrade', `Upgrade ${chalk.blue.underline('fe')} self`)
        .alias('U')
        // .argument('[options...]', 'Other environments')
        .action(invoke('upgrade'))
    return cmd
}
