const fs = require('fs')
const { join } = require('path')
const chalk = require('chalk')
const inquirer = require('inquirer')
const { inline, clearConsole } = require('../../utils/console')
const dotenv = require('dotenv')
module.exports = async (args, options, logger, rejectOpts) => {
  clearConsole()

  const runtime = await require('../runtime/')(null, null, rejectOpts)

  // Reload ENV vars
  dotenv.load({
    path: join(runtime.project.appRoot || process.cwd(), '.env')
  })

  let { env } = process

  // Reset NODE_ENV as production
  env.NODE_ENV = 'production'

  // check env
  if (!env || !env.SERVER_PORT) {
    inline.error('Not specified ENV configuration for production')
    const answers = await inquirer.prompt([
      {
        type: 'confirm',
        name: 'autoGen',
        default: false,
        message: `Do you want auto generate default ${chalk.green(
          '.env'
        )} for production?`
      }
    ])
    if (answers.autoGen) {
      fs.writeFileSync(
        join(runtime.project.appRoot, '.env'),
        `## .env

# production | development
NODE_ENV=production
SERVER_PORT=4000
SERVER_IP=0.0.0.0
CORS_ORIGIN=*
CORS_METHODS=GET,HEAD,PUT,PATCH,POST,DELETE
`
      )
      env = dotenv.config({
        path: join(runtime.project.appRoot || process.cwd(), '.env')
      }).parsed
    } else {
      inline.info(
        `Must provide ${chalk.green(
          '.env'
        )} as ENV configuration for production`
      )
      return process.exit()
    }
  }

  // check client dist
  if (!await require('./checkDist')(runtime)) {
    inline.warning(
      `Can not found the client dist, Now invoke ${chalk.magenta('fe build')}`
    )
    await require(`../build/plugins/${runtime.project.config.CLIENT_MODE}`)(
      runtime,
      {
        analyze: false
      }
    ).catch(err => inline.error(err))
  }
  const entry = join(runtime.ENV.cliRoot, 'modules/server/index.js')

  let { start } = require(entry)
  let server = await start({ ...args, ...options })
}
