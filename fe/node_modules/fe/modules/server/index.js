const minimist = require('minimist')
const { join } = require('path')
const proxy = require('http-proxy-middleware')
const { inline, clearConsole } = require('../../utils/console')
const chalk = require('chalk')
const start = async (opts = {}, plugins) => {
  const runtime = await require('../runtime/')()
  const sharedConfigPath = runtime.ENV.sharedConfigPath
  const { env = {} } = process
  const dev = env.NODE_ENV !== 'production'

  let {
    SERVER_PORT,
    SERVER_IP,
    CORS_ORIGIN,
    CORS_METHODS,
    IS_HOST_NETWORK,
    PORT0
  } = env

  if (dev) {
    SERVER_PORT = runtime.project.config.DEV_SERVER_PORT
    SERVER_IP = runtime.project.config.DEV_SERVER_IP
    CORS_ORIGIN = runtime.project.config.CORS_ORIGIN
    CORS_METHODS = runtime.project.config.CORS_METHODS
  } else {
    // 同步 TCE 环境变量, 支持 host / autohost 模式
    if (IS_HOST_NETWORK == 1 && PORT0) {
      env.SERVER_PORT = SERVER_PORT = PORT0
    }
  }

  // Create a server instance
  let fastifyEntry = null
  if (runtime.project.ENTRY_FILE) {
    fastifyEntry = require(runtime.project.ENTRY_FILE)
  }

  const fastifyEntryLogger = fastifyEntry ? fastifyEntry.logger : null
  const fastify = require('fastify')({
    // @see https://github.com/pinojs/pino/blob/master/docs/API.md#pinooptions-stream
    logger: fastifyEntryLogger || {
      // TODO: pretty dev logs
      logger: dev ? require('./plugins/logger')({}) : null
    }
    // logger: {
    //   level: 'debug',
    //   logger: pino({}, opts => {
    //     console.log(123)
    //   })
    //   // prettyPrint: true
    // }
  })

  // fastify.addHook('preHandler', async (request, reply, next) => {
  //   const oldLog = request.log
  //   console.log(11, request.log.info)
  //   request.log = new Proxy(oldLog, {
  //     get(target, key) {
  //       console.log(22, target, key)
  //       return () => {
  //         target[key](request.raw, ...arguments)
  //       }
  //     }
  //   })
  // })

  /**
   * Inject configure to fastify
   * You may use it as `fastify.runtime`
   */
  fastify.decorate('runtime', runtime)

  /**
   * Register middlewares
   */
  CORS_ORIGIN &&
    fastify.use(
      // QPS -1000
      require('cors')({
        origin: CORS_ORIGIN,
        methods: CORS_METHODS
      })
    )

  fastify.register(require('fastify-helmet'))

  if (dev) {
    // Register swagger api server ONLY in dev mode
    fastify.register(
      require('fastify-swagger'),
      require(join(sharedConfigPath, 'plugins/swagger.config'))(runtime)
    )
  }

  fastifyEntry &&
    fastify.register(fastifyEntry, {
      prefix: runtime.project.config.PREFIX_PATH
    })

  const { CLIENT_MODE } = runtime.project.config

  // Serve for public
  runtime.project.PUBLIC_DIR &&
    fastify.register(require('fastify-static'), {
      root: runtime.project.PUBLIC_DIR,
      prefix: join(
        runtime.project.config.PREFIX_PATH,
        runtime.project.config.PUBLIC_DIR
      )
      // prefix: runtime.project.config.PUBLIC_PATH
    })

  // Inject plugins
  if (plugins) {
    if (!Array.isArray(plugins)) plugins = [plugins]
    plugins.map(plugin => fastify.register(plugin))
  }

  // Use custom logger
  // .register(require('./plugins/logger'), { prefix: '/logger' })

  // Register custom modules here
  // .register(require('./modules/user/'), { prefix: '/api/user' })

  // register proxies
  const proxies = require('../../utils/mergeConfigFile')(
    'plugins/proxy.config.js',
    'proxy.config.js',
    runtime
  )

  for (let p in proxies) {
    p && proxies[p] && fastify.use(p, proxy(proxies[p]))
  }

  fastify.ready(err => {
    if (err) {
      inline.error(
        '[Server initialize failed]',
        chalk.red(err.name),
        err.message
      )

      // Only throw error in production mode
      if (!dev) throw err
    }
  })

  if (!dev) {
    // Intergrate client render
    const renderMode = CLIENT_MODE === 'vue' ? 'nuxt' : 'next'
    CLIENT_MODE &&
      fastify.register(
        require(`./plugins/${CLIENT_MODE}`),
        require('../../utils/mergeConfigFile')(
          `plugins/${renderMode}.config.js`,
          `${renderMode}.config.js`,
          runtime
        )
      )
  }
  return new Promise((resolve, reject) => {
    fastify.listen(
      +(opts.port || SERVER_PORT),
      opts.ip || SERVER_IP || '0.0.0.0',
      err => {
        if (err) return reject(err)
        return resolve(fastify)
      }
    )
  })
}

// Run the server as:
// $ node server.js -p 8080
require.main === module &&
  start(
    minimist(process.argv.slice(2), {
      integer: ['port'],
      alias: {
        port: 'p',
        ip: 'i'
      },
      default: {
        port: 3000,
        ip: '0.0.0.0'
      }
    })
  )
    .then(app => {
      // const address = app.server.address()
      // console.log(`\n🌏 http://${address.address}:${address.port}`)
    })
    .catch(err => console.error(err))

// TODO
// process.on('unhandledRejection', (reason, p) => {})

module.exports = { start }
