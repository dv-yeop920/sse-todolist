const pino = require('pino')
const { Spinner, inline } = require('../../../utils/console')
var split = require('split2')
var Parse = require('fast-json-parse')
var chalk = require('chalk')

const filter = line => {
  if (line.req && /^\/__webpack_hmr/.test(line.req.url)) return null
  if (line.path && line.path === '/robots.txt') return null
  if (line.path && /^\/_nuxt\/[^.]*\.hot-update\.json/.test(line.path))
    return null
  return line
}

const spinners = {}
const cache = {}

const formatter = line => {
  // console.log(11, line)
  const parsed = new Parse(line)
  const value = parsed.value

  // if (parsed.err || !isPinoLine(value)) {
  //   return line + eol
  // }

  line = filter(value)

  // 122 '{"level":30,"time":1521375919568,"msg":"incoming request","pid":3480,"hostname":"Freemans-MacBook-Pro.local","reqId":9,"req":{"id":9,"method":"GET","url":"/_nuxt/1.js","remoteAddress":"127.0.0.1","remotePort":55114},"v":1}'

  if (!line) return ''
  if (!line.reqId) {
    inline.success(`${line.msg} [${line.pid}]`)
  } else if (line.msg === 'incoming request') {
    cache[line.reqId] = line.req
  } else if (line.msg === 'request completed') {
    const statusCode = line.res.statusCode
    const isSuccess =
      (statusCode >= 200 && statusCode < 300) || statusCode === 304
    cache[line.reqId] &&
      inline[isSuccess ? 'success' : 'error'](
        `${chalk.green(`#${line.reqId}`)} ${chalk.gray(
          `[${cache[line.reqId].method}]`
        )} ${cache[line.reqId].url} ${chalk.gray('=>')} [${
          line.res.statusCode
        }] ${chalk.gray(line.responseTime)}`
      )
    delete cache[line.reqId]
  }
  return line
}

const pretty = opts => {
  let stream = split()
  try {
    stream = split(formatter)
  } catch (err) {}
  let pipe = stream.pipe
  stream.pipe = (dest, opts) => {
    return pipe.call(stream, dest, opts)
  }
  return stream
}

module.exports = (opts = {}) => {
  return pino(opts, pretty(opts))
}
