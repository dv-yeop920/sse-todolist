const chalk = require('chalk')
const Metalsmith = require('metalsmith')
const Handlebars = require('handlebars')
const async = require('async')
const path = require('path')
const minimatch = require('minimatch')
const execa = require('execa')
const render = require('consolidate').handlebars.render
const options = require('./options')
const ask = require('./ask')
const evaluate = require('./eval')
const { inline, Spinner } = require('../../utils/console')
const spinner = new Spinner()

const filter = (files, filters, data, done) => {
  if (!filters) {
    return done()
  }
  const fileNames = Object.keys(files)
  Object.keys(filters).forEach(glob => {
    fileNames.forEach(file => {
      if (minimatch(file, glob, { dot: true })) {
        const condition = filters[glob]
        if (!evaluate(condition, data)) {
          delete files[file]
        }
      }
    })
  })
  done()
}

// register handlebars helper
Handlebars.registerHelper('if_eq', function(a, b, opts) {
  return a === b ? opts.fn(this) : opts.inverse(this)
})

Handlebars.registerHelper('unless_eq', function(a, b, opts) {
  return a === b ? opts.inverse(this) : opts.fn(this)
})

/**
 * Generate a template given a `src` and `dest`.
 *
 * @param {String} name
 * @param {String} src
 * @param {String} dest
 * @param {Function} done
 */

module.exports = async function generate(name, src, dest, done) {
  var opts = options(name, src)
  var metalsmith = Metalsmith(path.join(src, 'boilerplate'))
  var data = Object.assign(metalsmith.metadata(), {
    destDirName: name,
    inPlace: dest === process.cwd(),
    noEscape: true
  })
  opts.helpers &&
    Object.keys(opts.helpers).map(function(key) {
      Handlebars.registerHelper(key, opts.helpers[key])
    })
  metalsmith
    .use(askQuestions(opts.prompts))
    .use(filterFiles(opts.filters))
    .use(renderTemplateFiles)
    .clean(false)
    .source('.') // start from template root instead of `./src` which is Metalsmith's default for `source`
    .destination(dest)
    .build(async err => {
      if (err) return done(err)
      spinner.start({
        text: 'Generate project..'
      })
      // spinner.start({
      //   text: 'Install project dependencies...'
      // })
      // await execa(path.join(require.resolve('yarn/bin/yarn')), {
      try {
        await execa('yarn', ['install'], {
          cwd: dest
        })
      } catch (err) {
        await execa('npm', ['install'], {
          cwd: dest
        })
      }
      spinner.stop()
      inline.success(`Generated success ${chalk.blue.underline(name)}`)
      logMessage(opts.completeMessage, data)
    })
  return data
}

/**
 * Create a middleware for asking questions.
 *
 * @param {Object} prompts
 * @return {Function}
 */

function askQuestions(prompts) {
  return function(files, metalsmith, done) {
    ask(prompts, metalsmith.metadata(), done)
  }
}

/**
 * Create a middleware for filtering files.
 *
 * @param {Object} filters
 * @return {Function}
 */

function filterFiles(filters) {
  return function(files, metalsmith, done) {
    filter(files, filters, metalsmith.metadata(), done)
  }
}

/**
 * Template in place plugin.
 *
 * @param {Object} files
 * @param {Metalsmith} metalsmith
 * @param {Function} done
 */

function renderTemplateFiles(files, metalsmith, done) {
  var keys = Object.keys(files)
  var metalsmithMetadata = metalsmith.metadata()
  async.each(
    keys,
    function(file, next) {
      var str = files[file].contents.toString()
      // do not attempt to render files that do not have mustaches
      if (!/{{([^{}]+)}}/g.test(str)) {
        return next()
      }
      render(str, metalsmithMetadata, function(err, res) {
        if (err) return next(err)
        files[file].contents = new Buffer(res)
        next()
      })
    },
    done
  )
}

/**
 * Display template complete message.
 *
 * @param {String} message
 * @param {Object} data
 */

function logMessage(message, data) {
  if (!message) return
  render(message, data, function(err, res) {
    if (err) {
      console.error(
        '\n   Error when rendering template complete message: ' +
          err.message.trim()
      )
    } else {
      console.log(`\nTo get started:`)
      console.log('')
      console.log(`${chalk.gray('  ------------------')}`)
      console.log(
        '  ' +
          res
            .split(/\r?\n/g)
            .map(function(line) {
              return `${chalk.blue(line)}`
            })
            .join('\n')
      )
      console.log(`${chalk.gray('  ------------------')}`)
      console.log('')
      console.log(`More infomation: ${chalk.blue.underline('fe -h')}`)
    }
  })
}
