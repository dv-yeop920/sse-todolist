const chalk = require('chalk')
const request = require('request')
const { inline, Spinner } = require('../../utils/console')

// Planning to use github group to store list
const list = [
  {
    name: 'plugins',
    usage: `${chalk.dim(`  USAGE: `)}${chalk.magenta('fe add <plugin>')}`,
    url: 'https://api.github.com/users/fe-plugins/repos'
  },
  {
    name: 'components',
    usage: `${chalk.dim(`  USAGE: `)}${chalk.magenta('fe add <component>')}`,
    url: 'https://api.github.com/users/fe-components/repos'
  },
  {
    name: 'boilerplates',
    usage: `${chalk.dim(`  USAGE: `)}${chalk.magenta(
      `fe init <project-name> [boilerplate]`
    )}`,
    url: 'https://api.github.com/users/fe-boilerplate/repos'
  }
]

const spinner = new Spinner()

const reporter = body => {
  console.log()
  console.log(`ðŸ“¦  Available official [${chalk.blue(body.reporter_name)}]:`)
  console.log()
  if (body.message) {
    inline.error(body.message)
  } else if (body.length) {
    body.forEach(function(repo) {
      console.log(
        `  ${chalk.yellow('â˜…')}  ${chalk.blue(repo.name)} ${
          repo.description ? `- ${repo.description}` : ''
        }`
      )
    })
  } else {
    console.log(`${chalk.dim(`  ðŸ˜ž  No one is available`)}`)
  }
  console.log()
  console.log(body.reporter_usage)
}

const fetchList = list =>
  new Promise((resolve, reject) => {
    request(
      {
        url: list.url,
        headers: {
          'User-Agent': 'fe'
        }
      },
      (err, res, body) => {
        if (err) return reject(err)
        try {
          resolve(
            Object.assign(JSON.parse(body), {
              reporter_name: list.name,
              reporter_usage: list.usage
            })
          )
        } catch (err) {
          console.log(123, body)
          reject(body)
        }
      }
    )
  })

module.exports = async (args, options, logger) => {
  spinner.start({
    text: 'fetching..'
  })
  let results = await Promise.all(list.map(item => fetchList(item))).catch(
    err => inline.error(err)
  )
  spinner.stop()
  results.map(reporter)
}
