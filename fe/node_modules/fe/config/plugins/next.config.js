module.exports = (runtime = {}) => {
  const { env = {} } = process
  const dev = env.NODE_ENV !== 'production'
  return {
    poweredByHeader: false,
    // Disabling file-system routing
    // useFileSystemPublicRoutes: false,
    distDir: `../${runtime.project.config.DIST_DIR}`,
    srcDir: runtime.project.config.CLIENT_DIR,

    webpack: (config, { buildId, dev, isServer, defaultLoaders }) => {
      // if (isServer) {
      //   config.externals = ['react', 'react-dom', ...config.externals]
      // }

      // Object.assign(config.resolve.alias, {
      //   react: 'preact-compat',
      //   'react-dom': 'preact-compat'
      // })

      config.resolveLoader.modules = config.resolveLoader.modules.concat([
        'node_modules',
        runtime.ENV.internalModulePath
      ])
      config.resolve.modules = config.resolve.modules.concat([
        'node_modules',
        runtime.ENV.internalModulePath
      ])
      return config
    }
    // webpackDevMiddleware: config => config,

    // assetPrefix: dev ? '' : 'https://cdn.mydomain.com',

    // const {serverRuntimeConfig, publicRuntimeConfig} = getConfig()
    // Will only be available on the server side
    // serverRuntimeConfig: {
    //   mySecret: 'secret'
    // },
    // Will be available on both server and client
    // publicRuntimeConfig: {
    //   staticFolder: '/static'
    // }
  }
}
